Prior to the introduction of the concurrency utilities in the Java standard
library (java.util.concurrent), the usage of Object's wait()/notify()/notifyAll()
methods was the way to establish communication between threads in Java. 
All those methods must be called only if the thread owns the monitor on the 
object in question. For eg. 

private Object lock = new Object(); 
public void performAction(){
    synchronized(lock){
        while(<condition>) {
            // Causes the current thread to wait until 
            // another thread invokes the notify() or notifyAll() methods
            lock.wait(); 
        }
        // some implementation here
       }
}

Method wait() releases the monitor lock the current thread holds because
the condition it is waiting for is not met yet(wait() methods must be called in a 
loop and should never be called outside of a loop). Consequently, another 
thread waiting on the same monitor get s a chance to turn. When this thread
is done, it should call one of  notify()/ notifyAll() methods to wake up 
the thread (or threads) waiting for the monitor lock. For eg. 
public void performAnotherAction(){
    synchronized(lock){
        // Some implementation here
        // Wakes up a single thread that is waiting on this object's monitor. 
        lock.notify(); 

    }
}

The difference between notify() and notifyAll() is that the first wakes up
a single thread while second wakes up all waiting threads(which start to contend
for the monitor lock). 

The wait()/notify() idiom is not advisable to be used in the modern Java
applications. Not only is it complicated, it also requires following a set 
if mandatory rules. As such it may cause subtle bugs in the running program
which will be very hard and time-consuming to investigate. The java.util.concurrent
has a lot to offer to replace the wait()/ notify() with much simpler alternatives
(which very likely will have much better performance in the real-world scenario). 


